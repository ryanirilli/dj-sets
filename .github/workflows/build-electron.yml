name: Build Electron App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest # Only run on macOS
    permissions: # Add permissions for creating releases
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Build Electron app for Mac
        run: npm run electron:build -- --mac # Explicitly build for mac
        env:
          # CSC_LINK / CSC_KEY_PASSWORD secrets needed for signing
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Artifacts Directory
        run: mkdir -p public/downloads # Keep this, might be useful for other things, or remove if truly unused

      - name: Move Artifacts (macOS)
        id: move_dmg # Give this step an ID to reference the output path
        run: |
          dmg_file=$(find dist -maxdepth 1 -name "*.dmg")
          if [ -z "$dmg_file" ]; then
            echo "::error::DMG file not found in dist directory!"
            exit 1
          fi
          mv "$dmg_file" public/downloads/
          echo "dmg_path=public/downloads/$(basename "$dmg_file")" >> $GITHUB_OUTPUT
          echo "dmg_name=$(basename "$dmg_file")" >> $GITHUB_OUTPUT

      # - name: Upload Artifacts (for viewing build results) # Optional: Keep if you want internal build artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: electron-build-mac
      #     path: ${{ steps.move_dmg.outputs.dmg_path }}

      - name: Get version from package.json
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create or Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          name: Release v${{ steps.package_version.outputs.version }}
          body: "Automated release for version ${{ steps.package_version.outputs.version }}."
          draft: false
          prerelease: false
          # upload_url: ${{ github.api_url }}/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets{?name,label}
          files: |
            ${{ steps.move_dmg.outputs.dmg_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
